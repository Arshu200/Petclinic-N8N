pipeline {
  agent any

  stages {
    stage('Build') {
      steps {
        script {
          sh '''
            chmod +x mvnw
            ./mvnw clean package
          '''
        }
      }
    }

    stage('Containerization') {
      steps {
        script {
          sh """
            docker build -t spring-petclinic:${env.BUILD_NUMBER} .
          """
        }
      }
    }

    // Uncomment and configure this stage if Slack notifications are needed
    // stage('Slack Notification') {
    //   steps {
    //     script {
    //       slackSend channel: '#test-internal',
    //         color: 'good',
    //         message: "The pipeline ${env.JOB_NAME} with build number ${env.BUILD_NUMBER} has been completed successfully."
    //     }
    //   }
    // }
  }

  post {
    failure {
      script {
        try {
          echo "Pipeline failed. Preparing to send logs to n8n..."

          // Capture and write the pipeline logs
          def log = currentBuild.rawBuild.getLog(Integer.MAX_VALUE)
          def logString = log.join("\n")
          writeFile file: 'pipeline.log', text: logString

          // Use curl to send the file to the webhook
          sh '''
            curl -F 'file=@pipeline.log' https://n8n.hdie.webhook.com/efefrerferffrre
          '''

          echo "Logs successfully sent to n8n."
        } catch (Exception e) {
          echo "ERROR sending logs to n8n: ${e.message}"
        }
      }
    }
  }
}
